id: get_other_title
type: datasource
subtype: SqlQueryUnified
resourceName: 41c0a6e5-4e39-46dc-9646-6210eed0de36
resourceDisplayName: Snowflake CTMv3
template:
  ordered:
    - queryRefreshTime: ''
    - streamResponse: false
    - records: ''
    - lastReceivedFromResourceAt: null
    - databasePasswordOverride: ''
    - queryDisabledMessage: ''
    - servedFromCache: false
    - offlineUserQueryInputs: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - workflowParams: null
    - resourceNameOverride: ''
    - runWhenModelUpdates: false
    - workflowRunId: null
    - showFailureToaster: true
    - query: >-
        select TITLE_ID, SOURCE_SYSTEM, SOURCE_SYSTEM_TITLE_ID, ot.TITLE_TYPE,
        NAME_FROM_SOURCE, RELEASE_YEAR_FROM_SOURCE, SEASON_NUMBER_FROM_SOURCE,
        EPISODE_NUMBER_FROM_SOURCE, TT_CODE_IMDB, GENRE_FROM_SOURCE,
        DISTRIBUTION_COMPANIES_FROM_SOURCE, gt.TITLE_NAME as goldent_title_name
        from EDWCTM.OTHER_TITLE ot

        left outer join EDWCTM.GOLDEN_TITLE gt on
        ot.GOLDEN_TITLE_ID=gt.GOLDEN_TITLE_ID


        where ot.title_type like '%'||case when
        {{otherTitleTypeSelect.value}}='any' then '' else
        {{titleTypeSelect.value}} end||'%' 

        and SOURCE_SYSTEM = {{otherTitleSourceSelect.value}} and
        release_year_FROM_SOURCE between
        {{otherTitleReleaseDateRange.value.start.split ('T')[0].split('-')[0]}}
        and {{otherTitleReleaseDateRange.value.end.split
        ('T')[0].split('-')[0]}} 

        and mapped_state = {{otherTitleMapToggleButton.value}}

        order by SOURCE_SYSTEM, TITLE_ID limit {{
        otherTitleTable.pagination.pageSize }} offset 
        {{otherTitleTable.pagination.offset }}
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - workflowRunBodyType: raw
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - warningCodes: []
    - data: null
    - recordId: ''
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: false
    - dataArray: []
    - cacheKeyTtl: ''
    - filterBy: ''
    - requestSentTimestamp: null
    - databaseHostOverride: ''
    - metadata: null
    - workflowActionType: null
    - editorMode: sql
    - queryRunTime: null
    - actionType: ''
    - changesetObject: ''
    - shouldUseLegacySql: false
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - finished: null
    - databaseNameOverride: ''
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: ''
    - watchedParams: []
    - enableErrorTransformer: false
    - enableBulkUpdates: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - bulkUpdatePrimaryKey: ''
    - runWhenPageLoads: false
    - transformer: |-
        // Query results are available as the `data` variable
        return formatDataAsArray(data)
    - events: []
    - isMultiplayerEdited: false
    - tableName: ''
    - queryTimeout: '10001'
    - workflowId: null
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - workflowBlockPluginId: null
    - databaseUsernameOverride: ''
    - shouldEnableBatchQuerying: false
    - doNotThrowOnNoOp: false
    - offlineQueryType: None
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2023-09-27T18:29:33.284Z
