id: dpUpdateCheckScheduleName
type: datasource
subtype: JavascriptQuery
resourceName: JavascriptQuery
template:
  ordered:
    - queryRefreshTime: ''
    - allowedGroupIds: []
    - streamResponse: false
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - servedFromCache: false
    - offlineUserQueryInputs: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - workflowParams: null
    - resourceNameOverride: ''
    - runWhenModelUpdates: false
    - workflowRunId: null
    - showFailureToaster: true
    - query: |-
        const dps = get_dp_objects_all.data
        var i = 0

        while (i<dps.length) {

         if (dps[i].schedule_name == dpScheduleName2.value &&
             dps[i].schedule_group == dpScheduleGroup2.value &&
             dps[i].datapipeline_name != dpName2.value
             ) {
               utils.showNotification({ 
          title: "Validation Error", 
          description: "Schedule name is already used by datapipeline " + dps[i].datapipeline_name, 
          notificationType: "error" ,
          duration: 5});
                dpScheduleName2.focus();
                return;
              } 
          else if (dps[i].task_name == dpTaskName2.value && dps[i].datapipeline_name != dpName2.value
                  ) {
            utils.showNotification({ 
          title: "Validation Error", 
          description: "Task name is already used by datapipeline " + dps[i].datapipeline_name,  
          notificationType: "error",
          duration: 5});
            dpTaskName2.focus();
            return;
          }
          i++;
        }
        updateDPModal.open();
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - workflowRunBodyType: raw
    - privateParams: []
    - workflowBlockUuid: null
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - _additionalScope: []
    - isImported: false
    - showSuccessToaster: false
    - cacheKeyTtl: ''
    - requestSentTimestamp: null
    - metadata: null
    - workflowActionType: null
    - queryRunTime: null
    - changesetObject: ''
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - finished: null
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - overrideOrgCacheForUserCache: false
    - runWhenPageLoads: false
    - transformer: |-
        // Query results are available as the `data` variable
        return data
    - events: []
    - queryTimeout: '10000'
    - workflowId: null
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - workflowBlockPluginId: null
    - offlineQueryType: None
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2023-11-12T00:30:33.941Z
